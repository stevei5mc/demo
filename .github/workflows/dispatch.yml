name: dispatch
on:
  workflow_dispatch:
    inputs:
      build-plugin:
        description: 'Build plugin'
        required: false
        default: true
        type: boolean
      build-Docusaurus:
        description: 'Build docusaurus'
        required: false
        default: true
        type: boolean
      additional-functions:
        description: "Additional functions"
        required: false
        default: 'Not used'
        type: choice
        options:
        - Not used
        - PR Approve
        - Deploy gitHub pages
        - Release snapshot version
        - Release latest version
      PR_ID:
        description: 'PR Approve ID'
        required: false
      Release_version:
        description: 'Release version'
        required: false

jobs:
  initialize:
    runs-on: ubuntu-latest
    outputs:
      repo_name: ${{ steps.get_info.outputs.repo_name }}
      artifact_name: ${{ steps.get_info.outputs.repo_name }}-Dispatch-Build_${{ github.run_number }}
      additional-functions: ${{ steps.get_info.outputs.additional-functions }}
      PR_ID: ${{ steps.get_info.outputs.PR_ID }}
      url: ${{ steps.get_info.outputs.url }}
    steps:
    - name: 获取信息
      id: get_info
      run: |
        echo "repo_name=${GITHUB_REPOSITORY/${{ github.repository_owner }}\//}" >> $GITHUB_OUTPUT
        echo "additional-functions=${{ inputs.additional-functions }}" >> $GITHUB_OUTPUT
        echo "PR_ID=${{ inputs.PR_ID }}" >> $GITHUB_OUTPUT
    - name:  Output info list
      run: |
        echo Bases info:
        echo Build plugin : ${{ inputs.build-plugin }}
        echo Build docusaurus : ${{ inputs.build-Docusaurus }}
        echo Artifact name: ${{ steps.get_info.outputs.repo_name }}-Dispatch-Build_${{ github.run_number }}
        echo Additional functions info:
        echo Functions: ${{ inputs.additional-functions }}
        echo PR ID : ${{ inputs.PR_ID }}
  
  build-plugin:
    if: ${{ inputs.build-plugin }}
    name: Build plugin
    needs: initialize
    runs-on: ubuntu-latest
    steps:
    - name:  Output info list
      run: |
        echo Bases info:
        echo Repository: ${{ needs.initialize.outputs.repo_name }}
        echo Build plugin : ${{ inputs.build-plugin }}
        echo Build docusaurus : ${{ inputs.build-Docusaurus }}
        echo Artifact name: ${{ needs.initialize.outputs.artifact_name }}
        echo Additional functions info:
        echo Functions: ${{ inputs.additional-functions }}
        echo PR ID : ${{ inputs.PR_ID }}

  build-Docusaurus:
    if: ${{ inputs.build-Docusaurus }}
    name: Build docusaurus
    needs: initialize
    runs-on: ubuntu-latest
    steps:
    - name:  Output info list
      run: |
        echo Bases info:
        echo Repository: ${{ needs.initialize.outputs.repo_name }}
        echo Build plugin : ${{ inputs.build-plugin }}
        echo Build docusaurus : ${{ inputs.build-Docusaurus }}
        echo Artifact name: ${{ needs.initialize.outputs.artifact_name }}
        echo Additional functions info:
        echo Functions: ${{ inputs.additional-functions }}
        echo PR ID : ${{ inputs.PR_ID }}

  PR-Approve:
    if: needs.initialize.outputs.additional-functions == 'PR Approve'
    name: PR Approve
    needs: 
    - build-Docusaurus
    - build-plugin
    runs-on: ubuntu-latest
    env:
      repo: ${{ needs.initialize.outputs.repo_name }}
    steps:
      - name: test
        run: |
          echo initialize: ${{ needs.initialize.result }}
          echo build plugin: ${{ needs.build-plugin.result }}
          echo build Docusaurus: ${{ needs.build-Docusaurus.result }}
          echo PR Approve: ${{ needs.PR-Approve.result }}
          echo Additional functions ${{ needs.initialize.outputs.additional-functions }}
          echo REPO NAME ${{ needs.initialize.outputs.repo_name }}
          echo name ${{ env.repo }}


  deploy-gitHub-pages:
    if: needs.initialize.outputs.additional-functions == 'PR Approve'
    name: Deploy gitHub pages
    needs: 
    - build-Docusaurus
    - build-plugin 
    # 给予 GITHUB_TOKEN 进行 Pages 部署所必须的权限
    permissions:
      pages: write # 以部署到 Pages
      id-token: write # 以验证部署来自恰当的源
    # 部署到 Github Pages 环境
    # environment:
    #   name: github-pages
    #   url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - name:  Output info list
      run: |
        echo Bases info:
        echo Repository: ${{ needs.initialize.outputs.repo_name }}
        echo Build plugin : ${{ inputs.build-plugin }}
        echo Build docusaurus : ${{ inputs.build-Docusaurus }}
        echo Artifact name: ${{ needs.initialize.outputs.artifact_name }}
        echo Additional functions info:
        echo Functions: ${{ inputs.additional-functions }}
        echo PR ID : ${{ inputs.PR_ID }}

  release:
    if: needs.initialize.outputs.additional-functions == 'PR Approve'
    needs: 
    - build-Docusaurus
    - build-plugin
    runs-on: ubuntu-latest
    env:
      repo: ${{ needs.initialize.outputs.repo_name }}
    steps:
    - name:  Output info list
      run: |
        echo Bases info:
        echo Repository: ${{ needs.initialize.outputs.repo_name }}
        echo Build plugin : ${{ inputs.build-plugin }}
        echo Build docusaurus : ${{ inputs.build-Docusaurus }}
        echo Artifact name: ${{ needs.initialize.outputs.artifact_name }}
        echo Additional functions info:
        echo Functions: ${{ inputs.additional-functions }}
        echo PR ID : ${{ inputs.PR_ID }}
  
  aftermath-of-failure:
    # if: ${{ failure() }}
    if: failure()
    name: Aftermath of failure
    needs: 
    - PR-Approve
    - deploy-gitHub-pages
    - release
    runs-on: ubuntu-latest
    steps:
      - name: 获取信息
        id: get_info
        run: |
          echo "repo_name=${GITHUB_REPOSITORY/${{ github.repository_owner }}\//}" >> $GITHUB_OUTPUT
          echo "additional-functions=${{ inputs.additional-functions }}" >> $GITHUB_OUTPUT
          echo "PR_ID=${{ inputs.PR_ID }}" >> $GITHUB_OUTPUT
          echo "url=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_OUTPUT
      - name: Settings info
        id: settings_info
        run: |
          if [[ "${{ inputs.additional-functions }}" == "PR Approve" || "${{ inputs.additional-functions }}" == "PR Approve and Deploy gitHub pages" ]]; then
            echo "PR_Approve=true" >> $GITHUB_OUTPUT
          else
            echo "PR_Approve=false" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.additional-functions }}" == "Deploy gitHub pages" || "${{ inputs.additional-functions }}" == "PR Approve and Deploy gitHub pages" ]]; then
            echo "Deploy_github_pages=true" >> $GITHUB_OUTPUT
          else
            echo "Deploy_github_pages=false" >> $GITHUB_OUTPUT
          fi
      - name:  Output info list
        run: |
          echo Bases info:
          echo Build plugin : ${{ inputs.build-plugin }}
          echo Build docusaurus : ${{ inputs.build-Docusaurus }}
          echo Artifact name: ${{ steps.get_info.outputs.repo_name }}-Dispatch-Build_${{ github.run_number }}
          echo Additional functions info:
          echo PR Approve: ${{ steps.settings_info.outputs.PR_Approve }}
          echo PR Approve ID : ${{ inputs.PR_ID }}
          echo Deploy github pages: ${{ steps.settings_info.outputs.Deploy_github_pages }}
      - name: 拉取代码
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: PR review message
        if: steps.settings_info.outputs.PR_Approve == 'true'
        uses: mshick/add-pr-comment@v2.8.2
        with:
          issue: ${{ inputs.PR_ID }}
          message-path: ./.github/message_template/failure_messgae.txt
          find: action_url
          replace: ${{ steps.get_info.outputs.url }}
        # uses: miry/prcomment@v0.1.3
        # with:
        #   msg: |
        #     构建失败，请查看构建日志获取失败原因
        #     确保能通过CI检查，本PR方可合并
        #     Build failed, please check the build to obtain the reason for the failure:

        #     ${{ steps.get_info.outputs.url }}
        #   pr: ${{ inputs.PR_ID }}
        #   token: ${{ secrets.GITHUB_TOKEN }}